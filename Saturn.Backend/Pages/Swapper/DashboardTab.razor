@using Saturn.Backend.Data.SaturnConfig
@using Saturn.Backend.Data
@using System.Diagnostics
@using System.Runtime.InteropServices
@using Saturn.Backend.Data.SaturnAPI
@using Saturn.Backend.Data.SaturnAPI.Models
@using Saturn.Backend.Data.Services
@using Saturn.Backend.Data.Variables

@inject IJSRuntime _jsRuntime;
@inject ISaturnAPIService _saturnApiService;
@inject LocalizationResourceService _localizationResourceService;

<div class="tab-page" id="dash-page" style="display: none">
    <div class="section vertical">
        <h1>@_localizationResourceService.GetString(34)</h1>
        <h3>@_localizationResourceService.GetString(35)</h3>
    </div>
    
    @if (Constants.isPlus)
    {
        <div class="section vertical">
            <h1>@_localizationResourceService.GetString(36)</h1>
            <h3>@_localizationResourceService.GetString(38)</h3>
        </div>
    }
    else
    {
        <div class="section vertical">
            <h1>@_localizationResourceService.GetString(36)</h1>
            <h3>@_localizationResourceService.GetString(37)</h3>
        
            <div class="input-block">
                <input placeholder="@_localizationResourceService.GetString(39)" @onfocusout="@(async() => await CheckKey())" @bind="@Config.Get()._config.Key"/>
                <span class="label">@_localizationResourceService.GetString(39)</span>
            </div>
        
            <br/>
        
            <h3>@_localizationResourceService.GetString(40)</h3>
            <button @onclick="@(async() => await GetKey())">
                <i class="fas fa-key" style="padding-right: 5px"></i>
                @_localizationResourceService.GetString(41)
            </button>
        </div>
    }

    @if (Constants.ConvertedIDs.Count != 0)
    {
        <div class="section vertical">
            <h1>@_localizationResourceService.GetString(42)</h1>
        
            @foreach (var id in Constants.ConvertedIDs)
            {
                <span>@id</span>
            }
        </div>
    }
</div>

@code {

    private async Task CheckKey()
    {
        Config.Get().Dispose();
        Constants.isKeyValid = await Utilities.IsKeyValid(_saturnApiService);
    }
    
    private async Task GetKey()
    {
        var idx = await _saturnApiService.ReturnEndpointAsync<IndexModel>("/");
        try
        {
            Process.Start(idx.KeyLink);
        }
        catch
        {
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                idx.KeyLink = idx.KeyLink.Replace("&", "^&");
                Process.Start(new ProcessStartInfo("cmd", $"/c start {idx.KeyLink}") { CreateNoWindow = true });
            }
            else
            {
                throw;
            }
        }
    }
}