@using Saturn.Backend.Data.Variables
@using Saturn.Backend.Data.Services
@using Saturn.Backend.Data.Swapper.Generation
@using Saturn.Backend.Data
@using Saturn.Backend.Data.FortniteCentral
@using Saturn.Backend.Data.SaturnAPI.Models

@inject IJSRuntime _jsRuntime
@inject LocalizationResourceService _localizationResourceService

<ul class="sidebar">
    <li id="plugins-li" class="selected" @onclick="@(async() => await SwitchState(SaturnState.S_Plugin))">
        <h6><i class="fas fa-box"></i> Library</h6>
    </li>
    
    <li id="marketplace-li" @onclick="@(async() => await SwitchState(SaturnState.S_Marketplace))">
        <h6><i class="fas fa-download"></i> Marketplace</h6>
    </li>
    
    <li id="key-li" onclick="saturn.modalManager.showModal('plugin-key')">
        <h6><i class="fas fa-key"></i> Key</h6>
    </li>
    
    <li id="back-li" class="settings" @onclick="@(async() => await GoBack())">
        <h6><i class="fas fa-arrow-to-left"></i> @_localizationResourceService.GetString(23)</h6>
    </li>
</ul>

@code {
    private async Task SwitchState(SaturnState state)
    {
        Constants.CosmeticState = state;
        await _jsRuntime.InvokeVoidAsync("saturn.tabManager.tabOutNoOutro", "plugins");
        await _jsRuntime.InvokeVoidAsync("saturn.tabManager.tabOutNoOutro", "marketplace");
        switch (state)
        {
            case SaturnState.S_Marketplace:
                await _jsRuntime.InvokeVoidAsync("saturn.tabManager.tabInNoIntro", "marketplace");
                break;
            case SaturnState.S_Plugin:
                await _jsRuntime.InvokeVoidAsync("saturn.tabManager.tabInNoIntro", "plugins");
                break;
        }
        StateHasChanged();
    }

    private async Task GoBack()
    {
        Constants.CosmeticState = SaturnState.S_Skin;

        DiscordService.DiscordHandler.UpdatePresence($"{Constants.USER_VERSION} - In Saturn", "Dash");
        
        await _jsRuntime.InvokeVoidAsync("saturn.tabManager.tabOut", "plugin");
        Constants.State = SaturnState.S_Dash;
        while (!await _jsRuntime.InvokeAsync<bool>("saturn.tabManager.checkTab", "dash")) {}
        await _jsRuntime.InvokeVoidAsync("saturn.tabManager.tabIn", "dash");
    }
}