@using Saturn.Backend.Data.Variables
@using Saturn.Backend.Data
@using Saturn.Backend.Data.SaturnAPI.Models
@using Saturn.Backend.Data.Services
@using Saturn.Backend.Data.Swapper.Assets
@using Saturn.Backend.Data.Swapper.Generation

@inject IJSRuntime _jsRuntime
@inject LocalizationResourceService _localizationResourceService

<div class="modal minimized" id="option-modal">
    <div class="modal-window" style="width: 490px">
        <div class="close-button" onclick="saturn.modalManager.hideModal('option')">
            <i class="fas fa-times"></i>
        </div>
        
        <div class="modal-header">
            <h1 class="modal-title">@OptionTitle</h1>
            <p class="modal-desc">@(_localizationResourceService.GetString(54) + OptionDescription)</p>
        </div>
        
        @foreach (var item in (BaseItem.OptionHandler ?? new OptionHandler()).PerfectOptions ?? new List<AssetSelectorItem>())
        {
            <div id="@(item.ID + "-section")" class="section hoverable" onclick="@(async() => await SelectItem(item))">
                <img src=@(item.GetHTMLImage()) alt="Icon"/>
                <div class="name">
                    <h1>@item.DisplayName</h1>
                    <h3>@item.Description</h3>
                </div>
            </div>
        }
        
        @if (((BaseItem.OptionHandler ?? new OptionHandler()).PerfectOptions ?? new List<AssetSelectorItem>()).Count == 0)
        {
            <div id="none-section" class="section hoverable">
                <img src="./img/Saturn.png" alt="Icon"/>
                <div class="name">
                    <h1>No options found!</h1>
                    <h3>You don't own any cosmetics that can swap to this item!</h3>
                </div>
            </div>
        }
    </div>
</div>


@code {
    private static AssetSelectorItem BaseItem = new();
    private static string OptionTitle = "TBD";
    private static string OptionDescription = "To be determined...";

    private async void ChangeState()
    {
        while (true)
        {
            StateHasChanged();
            await Task.Delay(500);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        ChangeState();
    }

    public static void UpdateItemInfo()
    {
        BaseItem = Constants.SelectedItem;
        OptionTitle = Constants.SelectedItem.DisplayName + " Options";
        OptionDescription = Constants.SelectedItem.DisplayName;
    }

    private async Task SelectItem(AssetSelectorItem item)
    {
        BaseItem = new AssetSelectorItem();
        Constants.SelectedOption = item;
        await _jsRuntime.InvokeVoidAsync("saturn.modalManager.hideModal", "option");
    }

}