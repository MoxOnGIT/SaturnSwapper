@using Saturn.Backend.Data.Variables
@using Saturn.Backend.Data.Services
@using Saturn.Backend.Data.SaturnConfig
@using Saturn.Backend.Data
@using Saturn.Backend.Data.Swapper.Swapping.Models

@inject IJSRuntime _jsRuntime
@inject LocalizationResourceService _localizationResourceService;

<div class="modal minimized" id="presetcreator-modal">
    <div class="modal-window" style="width: 490px">
        <div class="close-button" onclick="saturn.modalManager.hideModal('presetcreator')">
            <i class="fas fa-times"></i>
        </div>
                        
        <div class="modal-header">
            <h1 class="modal-title">@_localizationResourceService.GetString(87)</h1>
            <p class="modal-desc">@_localizationResourceService.GetString(88)</p>
        </div>
        
        <div class="section">
            <div class="input-block">
                <input placeholder="Cool Preset 1" @bind="@presetName"/>
                <span class="label">@_localizationResourceService.GetString(89)</span>
                </div>
            <button onclick="@(async() => await CreatePreset())">@_localizationResourceService.GetString(90)</button>
        </div>
    </div>
</div>

<div class="modal minimized" id="presetmanager-modal">
    <div class="modal-window" style="width: 490px">
        <div class="close-button" onclick="saturn.modalManager.hideModal('presetmanager')">
            <i class="fas fa-times"></i>
        </div>
                        
        <div class="modal-header">
            <h1 class="modal-title">@_localizationResourceService.GetString(91)</h1>
            <p class="modal-desc">@_localizationResourceService.GetString(92)</p>
        </div>
        
        @foreach (var preset in Config.Get().GetPresets().Where(x => x.PresetSwaps.Count > 0))
        {
            <div id="@(preset.PresetName + "-section")" class="section hoverable" onclick="@(async() => await Utilities.SwapPreset(preset, _jsRuntime))">
                <img src=@($"https://fortnite-api.com/images/cosmetics/br/{preset.PresetSwaps[0].ItemModel.ID}/smallicon.png") alt="Icon"/>
                <div class="name">
                    <h1>@preset.PresetName</h1>
                    <h3>@_localizationResourceService.GetString(93)</h3>
                </div>
                <div class="item-info" onclick="@(async() => await RemovePreset(preset))">
                    <h3>@_localizationResourceService.GetString(94)</h3>
                </div>
            </div>
        }
    </div>
</div>


@code {
    private string presetName;

    private async Task CreatePreset()
    {
        foreach (var swap in Constants.CurrentSwaps)
        {
            swap.ItemModel.IconBitmap = null;
            swap.ItemModel.FullBitmap = null;
            swap.OptionModel.IconBitmap = null;
            swap.OptionModel.FullBitmap = null;

            foreach (var option in swap.ItemModel.OptionHandler.Options)
            {
                option.IconBitmap = null;
                option.FullBitmap = null;
                option.IconBitmap = null;
                option.FullBitmap = null;
            }
            
            foreach (var option in swap.ItemModel.OptionHandler.PerfectOptions)
            {
                option.IconBitmap = null;
                option.FullBitmap = null;
                option.IconBitmap = null;
                option.FullBitmap = null;
            }
        }
        
        PresetModel preset = new()
        {
            PresetName = presetName,
            PresetSwaps = Constants.CurrentSwaps
        };

        Config.Get().AddPreset(preset);
        Config.Get().Dispose();

        await _jsRuntime.InvokeVoidAsync("saturn.modalManager.hideModal", "presetcreator");
        
        StateHasChanged();
    }
    
    private async Task RemovePreset(PresetModel preset)
    {
        // Bypass the race condition
        Constants.IsRemoving = true;
        
        Config.Get().RemovePreset(preset);
        Config.Get().Dispose();
        StateHasChanged();
    }
}