@using Saturn.Backend.Pages
@using Saturn.Backend.Data.Variables
@using Saturn.Backend.Data
@using System.Threading
@using System.Diagnostics
@using System.IO
@using Newtonsoft.Json
@using Saturn.Backend.Data.Discord
@using Saturn.Backend.Data.FortniteCentral
@using Saturn.Backend.Data.Services
@using Saturn.Backend.Data.Swapper.Generation

@inject IJSRuntime _jsRuntime
@inject IFortniteCentralService _fortniteCentralService;
@inject LocalizationResourceService _localizationResourceService;

<ul class="sidebar">
    <li id="cosmetic-li" onclick="@(async() => await SwitchState("cosmetic"))">
        <h6><i class="fas fa-user"></i> @_localizationResourceService.GetString(56)</h6>
    </li>
    
    <li id="plugin-li" onclick="@(async() => await SwitchState("plugin"))">
        <h6><i class="fas fa-plug"></i> @_localizationResourceService.GetString(113)</h6>
    </li>

    <li id="plus-li" onclick="@(async() => await SwitchState("plus"))">
        <h6><i class="fas fa-plus"></i> Saturn+</h6>
    </li>
    
    <li id="settings-li" class="settings" onclick="@(async() => await SwitchState("settings"))">
        <h6><i class="fas fa-cog"></i> @_localizationResourceService.GetString(58)</h6>
    </li>
    
    @if (WarningModal.IsEmergencyNoticeSet())
    {
        <li id="emergency-li" class="warn" onclick="saturn.modalManager.showModal('emergency')">
            <h6><i class="fas fa-exclamation-triangle"></i> @_localizationResourceService.GetString(59)</h6>
        </li>
    }
</ul>

@code {
    private async void ChangeState()
    {
        while (true)
        {
            StateHasChanged();
            await Task.Delay(500);
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        ChangeState();
    }

    private async Task SwitchState(string tabName)
    {
        string stateFrom = Constants.State switch
        {
            SaturnState.S_Skin => "cosmetic",
            SaturnState.S_Importer => "asset",
            SaturnState.S_Settings => "settings",
            SaturnState.S_Dash => "dash",
            SaturnState.S_Plus => "plus",
            SaturnState.S_SelectCosmetics => "cosmetic",
            SaturnState.S_Plugin => "plugin",
            _ => "cosmetic"
        };
        
        SaturnState stateToGoTo = tabName switch
        {
            "cosmetic" => SaturnState.S_Skin,
            "asset" => SaturnState.S_Importer,
            "settings" => SaturnState.S_Settings,
            "dash" => SaturnState.S_Dash,
            "plugin" => SaturnState.S_Plugin,
            "plus" => SaturnState.S_Plus,
            _ => SaturnState.S_Skin
        };
        
        if (Constants.State == stateToGoTo)
            return;

        if (stateToGoTo == SaturnState.S_Skin)
        {
            Logger.Log("Generating cosmetics!");
            await Constants.Handler.SwitchHandler(Constants.Handler.SkinHandler);
            Constants.Cosmetics.Clear();
            await Constants.Handler.Initialize();
            Logger.Log("Done!");
        }
        
        DiscordService.DiscordHandler.UpdatePresence($"{Constants.USER_VERSION} - In Saturn", stateToGoTo.ToString().Split("S_")[1]);
        
        if (DiscordUtilities.Member != null && !File.Exists(Constants.ExternalPath + "user.json"))
            await File.WriteAllTextAsync(Constants.ExternalPath + "user.json", JsonConvert.SerializeObject(DiscordUtilities.Member, Formatting.None));

        if (stateToGoTo == SaturnState.S_Plugin)
        {
            Constants.CosmeticState = SaturnState.S_Plugin;
        }
        
        await _jsRuntime.InvokeVoidAsync("saturn.tabManager.tabOut", stateFrom);
        Constants.State = stateToGoTo;
        while (!await _jsRuntime.InvokeAsync<bool>("saturn.tabManager.checkTab", tabName)) {}
        await _jsRuntime.InvokeVoidAsync("saturn.tabManager.tabIn", tabName);
    }
}