@using Radon.Ide.Backend.Core
@using System.IO
@using System.Windows.Forms
@using Microsoft.WindowsAPICodePack.Dialogs;
@using System.Formats.Asn1
@using System.Reflection
@using System.Text.Json
@using Radon.CodeAnalysis.Syntax
@using Radon.CodeAnalysis.Text
@using Radon.Common
@using System.Diagnostics
<div class="ide-page" id="ide-page">
    <div class="menu-strip">
        <div class="dropdown" id="@FileDropdownId" @onmouseover="() => MouseEnter_Dropdown(FileDropdownId)" 
             @onmouseout="() => MouseLeave_Dropdown(FileDropdownId)">
            <button class="dropbtn" @onmouseover="() => MouseOver(FileDropdownId)" 
                    @onmouseout="() => MouseLeave(FileDropdownId)">File</button>
            <div class="dropdown-content"  style="display: @(_isFileDropdownOpen ? "block" : "none")">
                <a href="#" @onclick="MenuItem_File_NewFile_Click">New File</a>
                <a href="#" @onclick="MenuItem_File_OpenFile_Click">Open File</a>
                <a href="#" @onclick="MenuItem_File_Save_Click">Save</a>
            </div>
        </div>
        <div class="dropdown" id="@EditDropdownId" @onmouseover="() => MouseEnter_Dropdown(EditDropdownId)" 
             @onmouseout="() => MouseLeave_Dropdown(EditDropdownId)">
            <button class="dropbtn" @onmouseover="() => MouseOver(EditDropdownId)" 
                    @onmouseout="() => MouseLeave(EditDropdownId)">Edit</button>
            <div class="dropdown-content" style="display: @(_isEditDropdownOpen ? "block" : "none")">
                <a href="#" @onclick="MenuItem_Edit_Undo_Click">Undo</a>
                <a href="#" @onclick="MenuItem_Edit_Redo_Click">Redo</a>
                <a href="#" @onclick="MenuItem_Edit_Cut_Click">Cut</a>
                <a href="#" @onclick="MenuItem_Edit_Copy_Click">Copy</a>
                <a href="#" @onclick="MenuItem_Edit_Paste_Click">Paste</a>
            </div>
        </div>
        <div class="dropdown" id="@ToolsDropdownId" @onmouseover="() => MouseEnter_Dropdown(ToolsDropdownId)" 
             @onmouseout="() => MouseLeave_Dropdown(ToolsDropdownId)">
            <button class="dropbtn" @onmouseover="() => MouseOver(ToolsDropdownId)" 
                    @onmouseout="() => MouseLeave(ToolsDropdownId)">Tools</button>
            <div class="dropdown-content" style="display: @(_isToolsDropdownOpen ? "block" : "none")">
                <a href="#" @onclick="MenuItem_Tools_Build_Click">Build</a>
            </div>
        </div>
    </div>
    <div class="editor">
        @if (IdeConstants.CurrentFile is not null)
        {
            <div class="editor-header">
                <text>@IdeConstants.CurrentFile</text>
            </div>
            <div class="editor-body">
                <div class="editor-line-numbers">
                    @for (var i = 0; i < _document.SourceText.Lines.Length; i++)
                    {
                        <div class="editor-line-number">
                            <style>
                                #line-number-text {
                                    font-size: 16px;
                                    line-height: 20px;
                                    font-family: 'JetBrains Mono', monospace;
                                }
                            </style>
                            <text id="line-number-text">@(i + 1)</text>
                        </div>
                    }
                </div>
                <div id="@TextEditorId" class="text-editor" @ref="_textareaRef" role="presentation" contenteditable="true" @onkeydown="async (e) => await HandleKeydown(e)">
                    @foreach (var token in _document.Tokens)
                    {
                        foreach (var leadingTrivia in token.LeadingTrivia)
                        {
                            BuildTrivia(leadingTrivia);
                        }

                        <span class="editor-token" style="">@token.Text</span>
                        foreach (var trailingTrivia in token.TrailingTrivia)
                        {
                            BuildTrivia(trailingTrivia);
                        }

                        if (token.Kind == SyntaxKind.EndOfFileToken)
                        {
                            break;
                        }
                        
                        continue;

                        void BuildTrivia(SyntaxTrivia trivia)
                        {
                            var chars = trivia.Text.ToCharArray();
                            if (trivia.Kind == SyntaxKind.WhitespaceTrivia)
                            {
                                foreach (var c in chars)
                                {
                                    if (c == '\t')
                                    {
                                        <span class="editor-trivia" style="">&#32; &#32; &#32; &#32;</span>
                                    }
                                    else
                                    {
                                        <span class="editor-trivia" style="">&#32;</span>
                                    }
                                }
                            }
                            else
                            {
                                if (trivia.Kind == SyntaxKind.LineBreakTrivia)
                                {
                                    if (trivia.Text != "\r\n")
                                    {
                                        return;
                                    }
                                    
                                    <span class="editor-trivia" style="">&#13; &#10;</span>
                                    <br/>
                                    var line = _document.SourceText.GetLineIndex(trivia.Position + 2);
                                    var lineText = _document.SourceText.Lines[line].ToString();
                                    if (lineText.Length != 0)
                                    {
                                        return;
                                    }
                                    
                                    var id = "blank-line" + line;
                                    <span class="editor-trivia" id="@id" style="">&#8203;</span>
                                }
                                else if (trivia.Kind == SyntaxKind.SingleLineCommentTrivia)
                                {
                                    <span class="editor-comment" style="">@trivia.Text</span>
                                }
                                else if (trivia.Kind == SyntaxKind.MultiLineCommentTrivia)
                                {
                                    <span class="editor-comment" style="">@trivia.Text</span>
                                }
                            }
                        }
                    }
                </div>
            </div>
        }
    </div>
</div>

@inject IJSRuntime JsRuntime
@code {
    private const string FileDropdownId = "fileDropdown";
    private const string EditDropdownId = "editDropdown";
    private const string ToolsDropdownId = "toolsDropdown";
    private const string TextEditorId = "textEditor";
    
    [Id(FileDropdownId + "Open")]
    private bool _isFileDropdownOpen;
    
    [Id(EditDropdownId + "Open")]
    private bool _isEditDropdownOpen;
    
    [Id(ToolsDropdownId + "Open")]
    private bool _isToolsDropdownOpen;
    
    private TextDocument _document = new(SourceText.Empty);
    private ElementReference? _textareaRef;
    private int _currentPosition;

    private string CurrentFileText => _document.SourceText.ToString();
    
    private void MouseEnter_Dropdown(string id)
    {
        var dropdownId = id + "Open";
        SetIdAttribute(dropdownId, true);
    }
    
    private async Task MouseLeave_Dropdown(string id)
    {
        var dropdownId = id + "Open";
        if (!await IsMouseOver(id))
        {
            SetIdAttribute(dropdownId, false);
        }
    }
    
    private void MouseEnter_FileDropdown()
    {
        _isFileDropdownOpen = true;
    }

    private void MouseOver(string id)
    {
        var dropdownId = id + "Open";
        SetIdAttribute(dropdownId, true);
    }

    private async Task MouseLeave(string id)
    {
        var dropdownId = id + "Open";
        if (!await IsMouseOver(id))
        {
            SetIdAttribute(dropdownId, false);
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_textareaRef is not null)
        {
            _currentPosition = await GetCursorPosition();
        }
    }
    
    private async Task HandleKeydown(KeyboardEventArgs e)
    {
        var currentLine = await GetCurrentLine();
        /*var position = await GetCursorPosition();
        var relativePosition = _document.SourceText.GetRelativePosition(currentLine, position);
        var text = await JsRuntime.InvokeAsync<string>("getText", _textareaRef);*/
        var line = _document.SourceText.Lines[currentLine].ToString();
        if (string.IsNullOrWhiteSpace(line) && e.Key == "Backspace" && currentLine != 0)
        {
            _document.SourceText = _document.SourceText.RemoveLine(currentLine);
            StateHasChanged();
        }
    }

    // File Menu Items
    private void MenuItem_File_NewFile_Click()
    {
        IdeConstants.State = IdeState.NewFile;
        _isFileDropdownOpen = false;
        CreateLines();
    }
    
    private void MenuItem_File_OpenFile_Click()
    {
        var folderDialog = new CommonOpenFileDialog();
        if (folderDialog.ShowDialog() != CommonFileDialogResult.Ok)
        {
            return;
        }
        
        var path = folderDialog.FileName;
        if (path == null)
        {
            MessageBox.Show("No file selected.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            return;
        }
        
        if (Path.GetExtension(path) != ".rd")
        {
            MessageBox.Show("Invalid file type.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            return;
        }

        IdeConstants.CurrentFile = path;
        _isFileDropdownOpen = false;
        CreateLines();
    }
    
    private void MenuItem_File_Save_Click()
    {
        _isFileDropdownOpen = false;
    }
    
    // Edit Menu Items
    private void MenuItem_Edit_Undo_Click()
    {
        _isEditDropdownOpen = false;
    }
    
    private void MenuItem_Edit_Redo_Click()
    {
        _isEditDropdownOpen = false;
    }
    
    private void MenuItem_Edit_Cut_Click()
    {
        _isEditDropdownOpen = false;
    }
    
    private void MenuItem_Edit_Copy_Click()
    {
        _isEditDropdownOpen = false;
    }
    
    private void MenuItem_Edit_Paste_Click()
    {
        _isEditDropdownOpen = false;
    }
    
    // Tools Menu Items
    private void MenuItem_Tools_Build_Click()
    {
        _isToolsDropdownOpen = false;
    }
    
    private async Task<bool> IsMouseOver(string id)
    {
        return await JsRuntime.InvokeAsync<bool>("isMouseOver", id);
    }
    
    private T GetIdAttribute<T>(string id)
    {
        var type = typeof(IdePage);
        var fields = type.GetFields(BindingFlags.NonPublic | BindingFlags.Instance);
        foreach (var field in fields)
        {
            if (field.GetCustomAttributes(typeof(IdAttribute), false).FirstOrDefault() is IdAttribute attribute && attribute.Id == id)
            {
                if (field.GetValue(this) is T value)
                {
                    return value;
                }
                
                throw new Exception("Field value is not of type " + type.Name);
            }
        }
        
        throw new Exception("No field with id " + id + " found.");
    }
    
    private void SetIdAttribute<T>(string id, T value)
    {
        var type = typeof(IdePage);
        var fields = type.GetFields(BindingFlags.NonPublic | BindingFlags.Instance);
        foreach (var field in fields)
        {
            if (field.GetCustomAttributes(typeof(IdAttribute), false).FirstOrDefault() is IdAttribute attribute && attribute.Id == id)
            {
                field.SetValue(this, value);
                return;
            }
        }
        
        throw new Exception("No field with id " + id + " found.");
    }
    
    private void CreateLines()
    {
        var file = IdeConstants.CurrentFile;
        if (file is null)
        {
            return;
        }
        
        var text = File.ReadAllText(file);
        var sourceText = SourceText.From(text);
        _document = new TextDocument(sourceText);
    }

    private async Task<int> GetCurrentLine()
    {
        var cursorPosition = await GetCursorPosition();
        var line = _document.SourceText.GetLineIndex(cursorPosition);
        return line;
    }
    
    private async Task<int> GetCursorPosition()
    {
        if (_textareaRef is null)
        {
            return 0;
        }
        
        var currentLineElement = await JsRuntime.InvokeAsync<JsonElement>("getCursorPosition", _textareaRef);
        if (currentLineElement.ValueKind == JsonValueKind.Null)
        {
            return 0;
        }
        
        return currentLineElement.GetInt32();
    }
}